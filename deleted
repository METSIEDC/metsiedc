<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MET'S IEDC Announcements</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5; /* light background */
            color: #333; /* dark text */
            line-height: 1.6;
            padding: 2rem;
        }
        .container {
            max-width: 960px;
            margin: 0 auto;
            background-color: #ffffff;
            border-radius: 1rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            padding: 2rem;
        }
        .text-primary {
            color: #007BFF; /* Blue */
        }
        .text-secondary {
            color: #6C757D; /* Gray */
        }
        .bg-primary {
            background-color: #007BFF;
        }
        .hover\:bg-blue-700:hover {
            background-color: #0056b3;
        }
        .announcement-item {
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 0.75rem;
            padding: 1rem;
            transition: all 0.2s ease-in-out;
        }
        .announcement-item:hover {
            background-color: #e2e8f0;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        .loading-spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left-color: #007BFF; /* Primary color */
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>

    <div class="container">
        <div class="text-center mb-12">
            <h1 class="text-4xl font-bold text-primary">Official Announcements</h1>
            <p class="text-xl text-secondary mt-4 max-w-2xl mx-auto">Important circulars, notices, and updates from MET'S IEDC.</p>
        </div>

        <div id="announcement-upload-section" class="bg-gray-100 p-6 rounded-lg shadow-lg mb-12 hidden">
            <h2 class="text-2xl font-semibold text-gray-800 mb-6">Upload New Announcement</h2>
            <form id="announcement-form" class="space-y-4">
                <div>
                    <label for="announcement-title" class="block text-sm font-medium text-gray-700">Title</label>
                    <input type="text" id="announcement-title" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required>
                </div>
                <div>
                    <label for="announcement-description" class="block text-sm font-medium text-gray-700">Description</label>
                    <textarea id="announcement-description" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2" required></textarea>
                </div>
                <div>
                    <label for="announcement-file" class="block text-sm font-medium text-gray-700">Upload File (PDF, DOCX, etc.)</label>
                    <input type="file" id="announcement-file" accept=".pdf,.doc,.docx,.txt" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" required>
                </div>
                <button type="submit" id="upload-announcement-btn" class="w-full bg-primary text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-300 flex items-center justify-center">
                    <span id="upload-button-text">Upload Announcement</span>
                    <div id="upload-spinner" class="loading-spinner ml-3 hidden"></div>
                </button>
                <p id="upload-status-message" class="text-center text-sm mt-2"></p>
            </form>
        </div>

        <div id="announcements-list" class="space-y-6">
            <p class="text-center text-secondary">Loading announcements...</p>
            </div>
        <p id="current-user-id" class="text-xs text-gray-400 text-right mt-8">User ID: N/A</p>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, query, orderBy, onSnapshot, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-storage.js";

        // Global Firebase instances and user ID
        let app, db, auth, storage;
        let userId = 'anonymous'; // Default to anonymous

        // Get app ID and Firebase config from global variables provided by Canvas
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // Initialize Firebase
        try {
            app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);
            storage = getStorage(app);
            console.log("Firebase initialized successfully.");
        } catch (error) {
            console.error("Error initializing Firebase:", error);
            document.getElementById('upload-status-message').textContent = 'Error: Firebase not initialized. Check console for details.';
        }

        // Authentication State Listener
        onAuthStateChanged(auth, async (user) => {
            const announcementUploadSection = document.getElementById('announcement-upload-section');
            const currentUserIdDisplay = document.getElementById('current-user-id');

            if (user) {
                userId = user.uid;
                console.log("User authenticated:", userId);
                announcementUploadSection.classList.remove('hidden'); // Show upload form
                currentUserIdDisplay.textContent = `User ID: ${userId}`;
            } else {
                // If no user, try signing in with custom token or anonymously
                try {
                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                        console.log("Signed in with custom token.");
                    } else {
                        await signInAnonymously(auth);
                        console.log("Signed in anonymously.");
                    }
                } catch (error) {
                    console.error("Error during authentication:", error);
                    announcementUploadSection.classList.add('hidden'); // Hide upload form if auth fails
                    currentUserIdDisplay.textContent = `User ID: Authentication Failed`;
                    // Display a user-friendly message without using alert()
                    const statusMessage = document.getElementById('upload-status-message');
                    statusMessage.textContent = 'Authentication required for uploads. Please ensure you are logged in.';
                    statusMessage.style.color = 'red';
                }
            }
            // After auth state is determined, load announcements
            loadAnnouncements();
        });

        // --- Announcements Functionality ---
        const announcementForm = document.getElementById('announcement-form');
        const announcementTitleInput = document.getElementById('announcement-title');
        const announcementDescriptionInput = document.getElementById('announcement-description');
        const announcementFileInput = document.getElementById('announcement-file');
        const uploadAnnouncementBtn = document.getElementById('upload-announcement-btn');
        const uploadButtonText = document.getElementById('upload-button-text');
        const uploadSpinner = document.getElementById('upload-spinner');
        const uploadStatusMessage = document.getElementById('upload-status-message');
        const announcementsList = document.getElementById('announcements-list');

        // Function to upload announcement
        announcementForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!auth.currentUser) {
                uploadStatusMessage.textContent = 'Error: You must be logged in to upload announcements.';
                uploadStatusMessage.style.color = 'red';
                return;
            }

            const title = announcementTitleInput.value.trim();
            const description = announcementDescriptionInput.value.trim();
            const file = announcementFileInput.files[0];

            if (!title || !description || !file) {
                uploadStatusMessage.textContent = 'Please fill in all fields and select a file.';
                uploadStatusMessage.style.color = 'orange';
                return;
            }

            uploadButtonText.textContent = 'Uploading...';
            uploadSpinner.classList.remove('hidden');
            uploadAnnouncementBtn.disabled = true;
            uploadStatusMessage.textContent = ''; // Clear previous messages

            try {
                // 1. Upload file to Firebase Storage
                const storageRef = ref(storage, `artifacts/${appId}/public/announcements/${file.name}`);
                const uploadTask = await uploadBytes(storageRef, file);
                const fileUrl = await getDownloadURL(uploadTask.ref);
                console.log('File uploaded:', fileUrl);

                // 2. Save announcement details to Firestore
                const docRef = await addDoc(collection(db, `artifacts/${appId}/public/announcements`), {
                    title: title,
                    description: description,
                    fileUrl: fileUrl,
                    fileName: file.name,
                    uploadedBy: userId, // Store the ID of the user who uploaded it
                    timestamp: serverTimestamp() // Use server timestamp
                });
                console.log("Announcement written with ID: ", docRef.id);

                uploadStatusMessage.textContent = 'Announcement uploaded successfully!';
                uploadStatusMessage.style.color = 'green';
                announcementForm.reset(); // Clear the form
            } catch (error) {
                console.error("Error uploading announcement:", error);
                uploadStatusMessage.textContent = `Error uploading: ${error.message}`;
                uploadStatusMessage.style.color = 'red';
            } finally {
                uploadButtonText.textContent = 'Upload Announcement';
                uploadSpinner.classList.add('hidden');
                uploadAnnouncementBtn.disabled = false;
            }
        });

        // Function to load and display announcements from Firestore
        function loadAnnouncements() {
            if (!db) {
                announcementsList.innerHTML = '<p class="text-center text-red-500">Database not available. Cannot load announcements.</p>';
                return;
            }

            announcementsList.innerHTML = '<p class="text-center text-secondary">Loading announcements...</p>';

            // Create a query to listen for real-time updates
            const q = query(collection(db, `artifacts/${appId}/public/announcements`), orderBy("timestamp", "desc"));

            onSnapshot(q, (snapshot) => {
                announcementsList.innerHTML = ''; // Clear existing announcements
                if (snapshot.empty) {
                    announcementsList.innerHTML = '<p class="text-center text-secondary">No announcements available yet.</p>';
                    return;
                }

                snapshot.forEach((doc) => {
                    const data = doc.data();
                    const date = data.timestamp ? new Date(data.timestamp.toDate()).toLocaleDateString() : 'N/A';
                    const time = data.timestamp ? new Date(data.timestamp.toDate()).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : '';

                    const announcementItem = `
                        <div class="announcement-item flex flex-col md:flex-row items-start md:items-center gap-4">
                            <div class="flex-shrink-0 text-primary text-4xl">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-megaphone"><path d="m3 11 18-6v11l-18 6z"/><path d="M7 5v12"/><path d="M11 5v12"/><path d="M15 5v12"/></svg>
                            </div>
                            <div class="flex-grow">
                                <h3 class="text-xl font-semibold text-gray-800">${data.title}</h3>
                                <p class="text-sm text-secondary">${data.description}</p>
                                <p class="text-xs text-gray-500 mt-1">Published: ${date} ${time} by ${data.uploadedBy.substring(0, 8)}...</p>
                            </div>
                            <div class="flex-shrink-0">
                                <a href="${data.fileUrl}" target="_blank" class="inline-flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300 text-sm">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/><polyline points="14 2 14 8 20 8"/><line x1="12" y1="17" x2="12" y2="10"/><polyline points="9 14 12 17 15 14"/></svg>
                                    Download ${data.fileName}
                                </a>
                            </div>
                        </div>
                    `;
                    announcementsList.innerHTML += announcementItem;
                });
            }, (error) => {
                console.error("Error loading announcements:", error);
                announcementsList.innerHTML = '<p class="text-center text-red-500">Failed to load announcements. Please check your internet connection or Firebase setup.</p>';
            });
        }

        // Initial load of announcements when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            loadAnnouncements();
        });
    </script>
</body>
</html>
